void move_piece (Board* b, Action action) {
    if (action out of 5×5?) {
        debug_print("in move_piece: index out of range.");
        goto END;
    }

    if (not from mochigoma) {
        if (not exist player's piece?) {
            debug_print("in move_piece: player\'s piece does not exist at the specified place.");
            goto END;
        }

        if (movement against the game logic?) {
            debug_print("in move_piece: movement against the game logic.");
            goto END;
        }

        if (piece collides while moving?) {
            debug_print("in move_piece: piece collides while moving.");
            goto END;
        }
    } else {  // from mochigoma
        if (exist some piece at the specified place?) {
            debug_print("in move_piece: piece already exists at the specified place.");
            goto END;
        }

        if (action.from_stock == FU) {
            if (is_nifu(b, action)) {
                debug_print("in move_piece: nifu foul.");
                goto END;
            }

            if (is_uchifu_mate(b, action)) {
                debug_print("in move_piece: uchifu-mate foul.");
                goto END;
            }
        }
    }

    move_piece_without_check(b, action);

    if (unable_to_move(b)) {
        debug_print("in move_piece: piece unable to move.");
        goto END;
    }

    if (neglect_of_mate(b)) {
        debug_print("in move_piece: neglect of oute.");
        goto END;
    }

    return;

END:
    abort_game(b->next_player);
}


もしくは、盤面bの一手先として考えられる行動を全列挙する関数を作り、
与えられたActionがその中に入っていなければ不正、と判断するというエラーチェック法も考えられる。